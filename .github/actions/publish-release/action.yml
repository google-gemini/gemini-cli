name: 'Publish Release'
description: 'Builds, prepares, and publishes the gemini-cli packages to npm and creates a GitHub release.'

inputs:
  release-version:
    description: 'The version to release (e.g., 0.1.11).'
    required: true
  npm-tag:
    description: 'The npm tag to publish with (e.g., latest, preview, nightly).'
    required: true
  wombat-token-core:
    description: 'The npm token for the @google/gemini-cli-core package.'
    required: true
  wombat-token-cli:
    description: 'The npm token for the @google/gemini-cli package.'
    required: true
  github-token:
    description: 'The GitHub token for creating the release.'
    required: true
  dry-run:
    description: 'Whether to run in dry-run mode.'
    type: 'boolean'
    required: true
  release-tag:
    description: 'The release tag for the release (e.g., v0.1.11).'
    required: true
  previous-tag:
    description: 'The previous tag to use for generating release notes.'
    required: true
  working-directory:
    description: 'The working directory to run the steps in.'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    - name: 'Print Inputs'
      shell: 'bash'
      run: |
        echo "::group::üìù Print Inputs"
        echo "${{ toJSON(inputs) }}"
        echo "::endgroup::"

    - name: 'Configure Git User'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      run: |
        echo "::group::üë§ Configure Git User"
        git config user.name "gemini-cli-robot"
        git config user.email "gemini-cli-robot@google.com"
        echo "::endgroup::"

    - name: 'Create and switch to a release branch'
      working-directory: '${{ inputs.working-directory }}'
      id: 'release_branch'
      shell: 'bash'
      run: |
        echo "::group::üåø Create and switch to a release branch"
        BRANCH_NAME="release/${{ inputs.release-tag }}"
        git switch -c "${BRANCH_NAME}"
        echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"

    - name: 'Update package versions'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      run: |
        echo "::group::‚¨ÜÔ∏è Update package versions"
        npm run release:version "${{ inputs.release-version }}"
        echo "::endgroup::"

    - name: 'Commit and Conditionally Push package versions'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      env:
        BRANCH_NAME: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
        DRY_RUN: '${{ inputs.dry-run }}'
        RELEASE_TAG: '${{ inputs.release-tag }}'
      run: |
        echo "::group::üíæ Commit and Conditionally Push package versions"
        git add package.json packages/*/package.json
        if [ -f npm-shrinkwrap.json ]; then
          git add npm-shrinkwrap.json
        fi
        if [ -f package-lock.json ]; then
          git add package-lock.json
        fi
        git commit -m "chore(release): ${RELEASE_TAG}"
        if [[ "${DRY_RUN}" == "false" ]]; then
          echo "Pushing release branch to remote..."
          git push --set-upstream origin "${BRANCH_NAME}" --follow-tags
        else
          echo "Dry run enabled. Skipping push."
        fi
        echo "::endgroup::"

    - name: 'Build and Prepare Packages'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      run: |
        echo "::group::üõ†Ô∏è Build and Prepare Packages"
        npm run build:packages
        npm run prepare:package
        echo "::endgroup::"

    - name: 'Configure npm for publishing'
      uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020'
      with:
        node-version-file: '${{ inputs.working-directory }}/.nvmrc'
        registry-url: 'https://wombat-dressing-room.appspot.com'
        scope: '@google'

    - name: 'Publish @google/gemini-cli-core'
      working-directory: '${{ inputs.working-directory }}'
      env:
        NODE_AUTH_TOKEN: '${{ inputs.wombat-token-core }}'
      shell: 'bash'
      run: |
        echo "::group::üì¶ Publish @google/gemini-cli-core"
        npm publish \
          --dry-run="${{ inputs.dry-run }}" \
          --workspace="@google/gemini-cli-core" \
          --tag="${{ inputs.npm-tag }}"
        echo "::endgroup::"

    - name: 'Install latest core package'
      working-directory: '${{ inputs.working-directory }}'
      if: '${{ inputs.dry-run == false }}'
      shell: 'bash'
      run: |
        echo "::group::üîó Install latest core package"
        npm install "@google/gemini-cli-core@${{ inputs.release-version }}" \
        --prefix=packages/cli \
        --save-exact
        echo "::endgroup::"

    - name: 'Publish @google/gemini-cli'
      working-directory: '${{ inputs.working-directory }}'
      env:
        NODE_AUTH_TOKEN: '${{ inputs.wombat-token-cli }}'
      shell: 'bash'
      run: |
        echo "::group::üì¶ Publish @google/gemini-cli"
        npm publish \
          --dry-run="${{ inputs.dry-run }}" \
          --workspace="@google/gemini-cli" \
          --tag="${{ inputs.npm-tag }}"
        echo "::endgroup::"

    - name: 'Bundle'
      working-directory: '${{ inputs.working-directory }}'
      shell: 'bash'
      run: |
        echo "::group::üéÅ Bundle"
        npm run bundle
        echo "::endgroup::"

    - name: 'Create GitHub Release'
      working-directory: '${{ inputs.working-directory }}'
      if: '${{ inputs.dry-run == false }}'
      env:
        GITHUB_TOKEN: '${{ inputs.github-token }}'
      shell: 'bash'
      run: |
        echo "::group::üéâ Create GitHub Release"
        gh release create "${{ inputs.release-tag }}" \
          bundle/gemini.js \
          --target "${{ steps.release_branch.outputs.BRANCH_NAME }}" \
          --title "Release ${{ inputs.release-tag }}" \
          --notes-start-tag "${{ inputs.previous-tag }}" \
          --generate-notes
        echo "::endgroup::"
