name: 'Nightly Release'

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run a dry-run of the release process; no branches, npm packages or GitHub releases will be created.'
        required: true
        type: 'boolean'
        default: true

jobs:
  release:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # ratchet:actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Build get-release-version script'
        run: npm run build:get-release-version

      - name: 'Get Nightly Version'
        id: 'nightly_version'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_JSON=$(node dist/get-release-version.js --type nightly)
          echo "RELEASE_TAG=$(echo "${VERSION_JSON}" | jq -r .releaseTag)" >> "${GITHUB_OUTPUT}"
          echo "RELEASE_VERSION=$(echo "${VERSION_JSON}" | jq -r .releaseVersion)" >> "${GITHUB_OUTPUT}"
          echo "NPM_TAG=$(echo "${VERSION_JSON}" | jq -r .npmTag)" >> "${GITHUB_OUTPUT}"
          echo "PREVIOUS_TAG=$(echo "${VERSION_JSON}" | jq -r .previousReleaseTag)" >> "${GITHUB_OUTPUT}"

      - name: 'Build and Prepare Packages'
        run: |-
          npm run build:packages
          npm run prepare:package

      - name: 'Configure npm for publishing'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://wombat-dressing-room.appspot.com'
          scope: '@google'

      - name: 'Publish @google/gemini-cli-core'
        env:
          NODE_AUTH_TOKEN: '${{ secrets.WOMBAT_TOKEN_CORE }}'
        run: |-
          npm publish \
            --dry-run="${{ github.event.inputs.dry_run }}" \
            --workspace="@google/gemini-cli-core" \
            --tag="${{ steps.nightly_version.outputs.NPM_TAG }}"

      - name: 'Install latest core package'
        if: ${{ !github.event.inputs.dry_run }}
        run: |-
          npm install "@google/gemini-cli-core@${{ steps.nightly_version.outputs.RELEASE_VERSION }}" \
          --workspace="@google/gemini-cli" \
          --save-exact

      - name: 'Publish @google/gemini-cli'
        env:
          NODE_AUTH_TOKEN: '${{ secrets.WOMBAT_TOKEN_CLI }}'
        run: |-
          npm publish \
            --dry-run="${{ github.event.inputs.dry_run }}" \
            --workspace="@google/gemini-cli" \
            --tag="${{ steps.nightly_version.outputs.NPM_TAG }}"

      - name: 'Bundle'
        run: npm run bundle

      - name: 'Create Nightly GitHub Release'
        if: ${{ !github.event.inputs.dry_run }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |-
          gh release create "${{ steps.nightly_version.outputs.RELEASE_TAG }}" \
            bundle/gemini.js \
            --target "main" \
            --title "Release ${{ steps.nightly_version.outputs.RELEASE_TAG }}" \
            --notes-start-tag "${{ steps.nightly_version.outputs.PREVIOUS_TAG }}" \
            --generate-notes