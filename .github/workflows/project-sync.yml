name: Project Board Sync

on:
  pull_request:
    types: [opened, labeled, unlabeled, closed, reopened, synchronize, ready_for_review]
  workflow_run:
    workflows: ["PR Compliance & Security Enforcement"]
    types: [completed]

permissions:
  contents: read
  pull-requests: read
  issues: read

jobs:
  sync-to-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request || (await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.workflow_run?.pull_requests?.[0]?.number
            }).then(r => r.data)).catch(() => null)

            if (!pr) return

            const labels = pr.labels.map(l => l.name)
            const isReady = pr.state === 'open' && pr.draft === false
            const hasSecurityLabel = labels.includes('security:needs-review')
            const compliancePassed = labels.includes('compliance:passed')
            const complianceFailed = labels.includes('compliance:failed')

            // Determine status based on PR state and labels
            let status
            if (pr.state === 'closed') {
              status = pr.merged ? 'Done' : 'Cancelled'
            } else if (pr.draft) {
              status = 'Draft'
            } else if (complianceFailed) {
              status = 'Needs Compliance'
            } else if (hasSecurityLabel && !compliancePassed) {
              status = 'Security Review'
            } else if (compliancePassed) {
              status = 'Ready to Merge'
            } else {
              status = 'In Review'
            }

            // Update project board (customize project number and field names)
            const projectNumber = ${{ vars.PROJECT_NUMBER || 1 }}
            const statusFieldName = 'Status'

            try {
              // Find or create PR item in project
              const query = `
                query($org:String!, $repo:String!, $number:Int!) {
                  repository(owner:$org, name:$repo) {
                    pullRequest(number:$number) {
                      id
                      projectItems(first:10) {
                        nodes {
                          id
                          project { id number }
                        }
                      }
                    }
                  }
                }`

              const result = await github.graphql(query, {
                org: context.repo.owner,
                repo: context.repo.repo,
                number: pr.number
              })

              const prNode = result.repository.pullRequest
              let itemId

              // Find existing item in the target project
              const targetProjectItem = prNode.projectItems.nodes.find(
                item => item.project.number === projectNumber
              )

              if (!targetProjectItem) {
                // Add PR to project
                const addMutation = `
                  mutation($projectId:ID!, $contentId:ID!) {
                    addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                      item { id }
                    }
                  }`

                const projectQuery = `
                  query($org:String!, $number:Int!) {
                    organization(login:$org) {
                      projectV2(number:$number) { id }
                    }
                  }`

                const project = await github.graphql(projectQuery, {
                  org: context.repo.owner,
                  number: projectNumber
                })

                const addResult = await github.graphql(addMutation, {
                  projectId: project.organization.projectV2.id,
                  contentId: prNode.id
                })

                itemId = addResult.addProjectV2ItemById.item.id
              } else {
                itemId = targetProjectItem.id
              }

              // Update status field
              const fieldQuery = `
                query($projectId:ID!) {
                  node(id:$projectId) {
                    ... on ProjectV2 {
                      fields(first:20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id name options { id name }
                          }
                        }
                      }
                    }
                  }
                }`

              const fields = await github.graphql(fieldQuery, {
                projectId: targetProjectItem.project.id
              })

              const statusField = fields.node.fields.nodes.find(
                f => f.name === statusFieldName
              )

              if (statusField) {
                const option = statusField.options.find(o => o.name === status)
                if (option) {
                  const updateMutation = `
                    mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:ID!) {
                      updateProjectV2ItemFieldValue(input:{
                        projectId:$projectId,
                        itemId:$itemId,
                        fieldId:$fieldId,
                        value:{ singleSelectOptionId:$optionId }
                      }) {
                        clientMutationId
                      }
                    }`

                  await github.graphql(updateMutation, {
                    projectId: targetProjectItem.project.id,
                    itemId: itemId,
                    fieldId: statusField.id,
                    optionId: option.id
                  })
                }
              }
            } catch (error) {
              console.log('Project sync failed:', error.message)
              // Don't fail the workflow if project sync fails
            }
