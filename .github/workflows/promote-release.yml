name: 'Promote Release'

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'The type of release to perform.'
        required: true
        type: choice
        options:
          - stable
          - preview
          - nightly
      dry_run:
        description: 'Run a dry-run of the release process; no branches, npm packages or GitHub releases will be created.'
        required: true
        type: 'boolean'
        default: true

jobs:
  calculate-versions:
    name: Calculate Versions and Plan
    runs-on: 'ubuntu-latest'
    outputs:
      STABLE_VERSION: ${{ steps.versions.outputs.STABLE_VERSION }}
      STABLE_SHA: ${{ steps.versions.outputs.STABLE_SHA }}
      PREVIOUS_STABLE_TAG: ${{ steps.versions.outputs.PREVIOUS_STABLE_TAG }}
      PREVIEW_VERSION: ${{ steps.versions.outputs.PREVIEW_VERSION }}
      PREVIEW_SHA: ${{ steps.versions.outputs.PREVIEW_SHA }}
      PREVIOUS_PREVIEW_TAG: ${{ steps.versions.outputs.PREVIOUS_PREVIEW_TAG }}
      NEXT_NIGHTLY_VERSION: ${{ steps.versions.outputs.NEXT_NIGHTLY_VERSION }}
      MAIN_SHA: ${{ steps.versions.outputs.MAIN_SHA }}

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Calculate Versions and SHAs'
        id: versions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find latest tags
          LATEST_PREVIEW_TAG=$(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | contains("preview"))] | .[0].tagName')
          LATEST_STABLE_TAG=$(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | (contains("nightly") or contains("preview")) | not)] | .[0].tagName')
          LATEST_NIGHTLY_TAG=$(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | contains("nightly"))] | .[0].tagName')

          # Get SHAs for tags and main
          PREVIEW_SHA=$(git rev-parse "${LATEST_PREVIEW_TAG}^{commit}")
          NIGHTLY_SHA=$(git rev-parse "${LATEST_NIGHTLY_TAG}^{commit}")
          MAIN_SHA=$(git rev-parse "origin/main")

          # Calculate new version numbers
          # Stable version is the preview version without the suffix
          STABLE_VERSION=$(echo "${LATEST_PREVIEW_TAG}" | sed 's/-preview.*//' | sed 's/^v//')

          # Preview version is the nightly version with a preview suffix
          PREVIEW_VERSION=$(echo "${LATEST_NIGHTLY_TAG}" | sed 's/-nightly.*//' | sed 's/^v//')-preview

          # Next nightly version is a minor bump on the current package.json version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          NEXT_MINOR=$((MINOR + 1))
          NEXT_NIGHTLY_VERSION="${MAJOR}.${NEXT_MINOR}.0-nightly"

          # Set outputs
          echo "STABLE_VERSION=${STABLE_VERSION}" >> $GITHUB_OUTPUT
          echo "STABLE_SHA=${PREVIEW_SHA}" >> $GITHUB_OUTPUT
          echo "PREVIOUS_STABLE_TAG=${LATEST_STABLE_TAG}" >> $GITHUB_OUTPUT
          echo "PREVIEW_VERSION=${PREVIEW_VERSION}" >> $GITHUB_OUTPUT
          echo "PREVIEW_SHA=${NIGHTLY_SHA}" >> $GITHUB_OUTPUT
          echo "PREVIOUS_PREVIEW_TAG=${LATEST_PREVIEW_TAG}" >> $GITHUB_OUTPUT
          echo "NEXT_NIGHTLY_VERSION=${NEXT_NIGHTLY_VERSION}" >> $GITHUB_OUTPUT
          echo "MAIN_SHA=${MAIN_SHA}" >> $GITHUB_OUTPUT

      - name: 'Print Plan'
        run: |
          echo "Release Type: ${{ github.event.inputs.release_type }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run }}"
          echo ""
          echo "--- Stable Promotion Plan ---"
          echo "Source Tag: ${{ steps.versions.outputs.PREVIOUS_PREVIEW_TAG }}"
          echo "Source SHA: ${{ steps.versions.outputs.STABLE_SHA }}"
          echo "New Stable Version: ${{ steps.versions.outputs.STABLE_VERSION }}"
          echo "Previous Stable Tag for Release Notes: ${{ steps.versions.outputs.PREVIOUS_STABLE_TAG }}"
          echo ""
          echo "--- Preview Promotion Plan ---"
          echo "Source Tag: $(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | contains("nightly"))] | .[0].tagName')"
          echo "Source SHA: ${{ steps.versions.outputs.PREVIEW_SHA }}"
          echo "New Preview Version: ${{ steps.versions.outputs.PREVIEW_VERSION }}"
          echo ""
          echo "--- Next Nightly Plan ---"
          echo "Source SHA: ${{ steps.versions.outputs.MAIN_SHA }}"
          echo "New Nightly Version: ${{ steps.versions.outputs.NEXT_NIGHTLY_VERSION }}"