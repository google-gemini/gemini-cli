name: 'Promote Release'

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run a dry-run of the release process; no branches, npm packages or GitHub releases will be created.'
        required: true
        type: 'boolean'
        default: true

jobs:
  promote:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # ratchet:actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Build get-release-version script'
        run: npm run build:get-release-version

      - name: 'Get main SHA'
        id: 'main_sha'
        run: echo "SHA=$(git rev-parse main)" >> $GITHUB_OUTPUT

      - name: 'Get latest preview tag'
        id: 'preview_tag'
        run: echo "TAG=$(git describe --tags --abbrev=0 --match 'v*-preview')" >> $GITHUB_OUTPUT

      - name: 'Get Stable Version'
        id: 'stable_version'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_JSON=$(node dist/get-release-version.js --type stable --version ${{ steps.preview_tag.outputs.TAG }})
          echo "RELEASE_TAG=$(echo "${VERSION_JSON}" | jq -r .releaseTag)" >> "${GITHUB_OUTPUT}"
          echo "RELEASE_VERSION=$(echo "${VERSION_JSON}" | jq -r .releaseVersion)" >> "${GITHUB_OUTPUT}"
          echo "NPM_TAG=$(echo "${VERSION_JSON}" | jq -r .npmTag)" >> "${GITHUB_OUTPUT}"
          echo "PREVIOUS_TAG=$(echo "${VERSION_JSON}" | jq -r .previousReleaseTag)" >> "${GITHUB_OUTPUT}"

      - name: 'Promote Preview to Stable'
        run: |
          git checkout ${{ steps.preview_tag.outputs.TAG }}
          npm ci
          npm run release:version ${{ steps.stable_version.outputs.RELEASE_VERSION }}
          npm run build:packages
          npm run prepare:package
          npm publish --workspace="@google/gemini-cli-core" --tag="${{ steps.stable_version.outputs.NPM_TAG }}" --dry-run=${{ github.event.inputs.dry_run }}
          npm publish --workspace="@google/gemini-cli" --tag="${{ steps.stable_version.outputs.NPM_TAG }}" --dry-run=${{ github.event.inputs.dry_run }}
        env:
          NODE_AUTH_TOKEN: '${{ secrets.WOMBAT_TOKEN_CLI }}'

      - name: 'Create Stable GitHub Release'
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          npm run bundle
          gh release create "${{ steps.stable_version.outputs.RELEASE_TAG }}" \
            bundle/gemini.js \
            --target "${{ steps.preview_tag.outputs.TAG }}" \
            --title "Release ${{ steps.stable_version.outputs.RELEASE_TAG }}" \
            --notes-start-tag "${{ steps.stable_version.outputs.PREVIOUS_TAG }}" \
            --generate-notes
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Get Preview Version'
        id: 'preview_version'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_JSON=$(node dist/get-release-version.js --type preview --version ${{ steps.stable_version.outputs.RELEASE_TAG }})
          echo "RELEASE_TAG=$(echo "${VERSION_JSON}" | jq -r .releaseTag)" >> "${GITHUB_OUTPUT}"
          echo "RELEASE_VERSION=$(echo "${VERSION_JSON}" | jq -r .releaseVersion)" >> "${GITHUB_OUTPUT}"
          echo "NPM_TAG=$(echo "${VERSION_JSON}" | jq -r .npmTag)" >> "${GITHUB_OUTPUT}"
          echo "PREVIOUS_TAG=$(echo "${VERSION_JSON}" | jq -r .previousReleaseTag)" >> "${GITHUB_OUTPUT}"

      - name: 'Create Next Preview from main'
        run: |
          git checkout ${{ steps.main_sha.outputs.SHA }}
          npm ci
          npm run release:version ${{ steps.preview_version.outputs.RELEASE_VERSION }}
          npm run build:packages
          npm run prepare:package
          npm publish --workspace="@google/gemini-cli-core" --tag="${{ steps.preview_version.outputs.NPM_TAG }}" --dry-run=${{ github.event.inputs.dry_run }}
          npm publish --workspace="@google/gemini-cli" --tag="${{ steps.preview_version.outputs.NPM_TAG }}" --dry-run=${{ github.event.inputs.dry_run }}
        env:
          NODE_AUTH_TOKEN: '${{ secrets.WOMBAT_TOKEN_CLI }}'

      - name: 'Create Preview GitHub Release'
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          npm run bundle
          gh release create "${{ steps.preview_version.outputs.RELEASE_TAG }}" \
            bundle/gemini.js \
            --target "${{ steps.main_sha.outputs.SHA }}" \
            --title "Release ${{ steps.preview_version.outputs.RELEASE_TAG }}" \
            --notes-start-tag "${{ steps.stable_version.outputs.RELEASE_TAG }}" \
            --generate-notes
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Prepare main for Next Nightly'
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          NEXT_NIGHTLY_VERSION=$(node -e "console.log(require('./scripts/get-release-version.js').calculateNextVersion('${{ steps.preview_version.outputs.RELEASE_VERSION }}'))")
          git checkout ${{ steps.main_sha.outputs.SHA }}
          git checkout -b release/prepare-nightly-${NEXT_NIGHTLY_VERSION}
          npm run release:version ${NEXT_NIGHTLY_VERSION}
          git add .
          git commit -m "chore(release): Prepare for next nightly version ${NEXT_NIGHTLY_VERSION}"
          git push -u origin release/prepare-nightly-${NEXT_NIGHTLY_VERSION}
          gh pr create --title "chore(release): Prepare for next nightly version ${NEXT_NIGHTLY_VERSION}" --body "Automated PR to update the version in main." --base main
          gh pr merge --auto --merge
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'