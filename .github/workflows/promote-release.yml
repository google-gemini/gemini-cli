name: 'Promote Release'

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run a dry-run of the release process; no branches, npm packages or GitHub releases will be created.'
        required: true
        type: 'boolean'
        default: true

jobs:
  calculate-versions:
    name: Calculate Versions and Plan
    runs-on: 'ubuntu-latest'
    outputs:
      STABLE_VERSION: ${{ steps.versions.outputs.STABLE_VERSION }}
      STABLE_SHA: ${{ steps.versions.outputs.STABLE_SHA }}
      PREVIOUS_STABLE_TAG: ${{ steps.versions.outputs.PREVIOUS_STABLE_TAG }}
      PREVIEW_VERSION: ${{ steps.versions.outputs.PREVIEW_VERSION }}
      PREVIEW_SHA: ${{ steps.versions.outputs.PREVIEW_SHA }}
      PREVIOUS_PREVIEW_TAG: ${{ steps.versions.outputs.PREVIOUS_PREVIEW_TAG }}
      NEXT_NIGHTLY_VERSION: ${{ steps.versions.outputs.NEXT_NIGHTLY_VERSION }}

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Calculate Versions and SHAs'
        id: versions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Find latest tags
          LATEST_PREVIEW_TAG=$(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | contains("preview"))] | .[0].tagName')
          LATEST_STABLE_TAG=$(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | (contains("nightly") or contains("preview")) | not)] | .[0].tagName')
          LATEST_NIGHTLY_TAG=$(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | contains("nightly"))] | .[0].tagName')

          if [ -z "$LATEST_PREVIEW_TAG" ]; then
            echo "Error: Could not find latest preview tag."
            exit 1
          fi
          if [ -z "$LATEST_STABLE_TAG" ]; then
            echo "Error: Could not find latest stable tag."
            exit 1
          fi
          if [ -z "$LATEST_NIGHTLY_TAG" ]; then
            echo "Error: Could not find latest nightly tag."
            exit 1
          fi

          # Get SHAs for tags
          PREVIEW_SHA=$(git rev-parse "${LATEST_PREVIEW_TAG}^{commit}")
          NIGHTLY_SHA=$(git rev-parse "${LATEST_NIGHTLY_TAG}^{commit}")

          # Calculate new version numbers
          STABLE_VERSION=$(echo "${LATEST_PREVIEW_TAG}" | sed 's/-preview.*//' | sed 's/^v//')
          PREVIEW_VERSION=$(echo "${LATEST_NIGHTLY_TAG}" | sed 's/-nightly.*//' | sed 's/^v//')-preview
          
          # Next nightly version is a minor bump on the current package.json version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          NEXT_MINOR=$((MINOR + 1))
          NEXT_NIGHTLY_VERSION="${MAJOR}.${NEXT_MINOR}.0-nightly"

          # Set outputs
          echo "STABLE_VERSION=${STABLE_VERSION}" >> $GITHUB_OUTPUT
          echo "STABLE_SHA=${PREVIEW_SHA}" >> $GITHUB_OUTPUT
          echo "PREVIOUS_STABLE_TAG=${LATEST_STABLE_TAG}" >> $GITHUB_OUTPUT
          echo "PREVIEW_VERSION=${PREVIEW_VERSION}" >> $GITHUB_OUTPUT
          echo "PREVIEW_SHA=${NIGHTLY_SHA}" >> $GITHUB_OUTPUT
          echo "PREVIOUS_PREVIEW_TAG=${LATEST_PREVIEW_TAG}" >> $GITHUB_OUTPUT
          echo "NEXT_NIGHTLY_VERSION=${NEXT_NIGHTLY_VERSION}" >> $GITHUB_OUTPUT

  promote:
    name: Promote to ${{ matrix.channel }}
    needs: calculate-versions
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
      packages: 'write'
    strategy:
      matrix:
        include:
          - channel: stable
            version: ${{ needs.calculate-versions.outputs.STABLE_VERSION }}
            sha: ${{ needs.calculate-versions.outputs.STABLE_SHA }}
            npm-tag: latest
            previous-tag: ${{ needs.calculate-versions.outputs.PREVIOUS_STABLE_TAG }}
          - channel: preview
            version: ${{ needs.calculate-versions.outputs.PREVIEW_VERSION }}
            sha: ${{ needs.calculate-versions.outputs.PREVIEW_SHA }}
            npm-tag: preview
            previous-tag: ${{ needs.calculate-versions.outputs.PREVIOUS_PREVIEW_TAG }}

    steps:
      - name: 'Checkout workflow files'
        uses: 'actions/checkout@v4'
        with:
          ref: 'mk/update-version-process'

      - name: 'Checkout correct SHA'
        uses: 'actions/checkout@v4'
        with:
          ref: ${{ matrix.sha }}
          path: 'release'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Install Dependencies'
        working-directory: ./release
        run: npm ci

      - name: 'Configure Git User'
        working-directory: ./release
        run: |-
          git config user.name "gemini-cli-robot"
          git config user.email "gemini-cli-robot@google.com"

      - name: 'Create and switch to a release branch'
        working-directory: ./release
        id: 'release_branch'
        run: |
          BRANCH_NAME="release/v${{ matrix.version }}"
          git switch -c "${BRANCH_NAME}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"

      - name: 'Update package versions'
        working-directory: ./release
        run: |-
          npm run release:version "${{ matrix.version }}"

      - name: 'Commit and Conditionally Push package versions'
        working-directory: ./release
        env:
          BRANCH_NAME: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
          DRY_RUN: '${{ github.event.inputs.dry_run }}'
          RELEASE_TAG: 'v${{ matrix.version }}'
        run: |-
          git add package.json package-lock.json packages/*/package.json
          git commit -m "chore(release): ${RELEASE_TAG}"
          if [[ "${DRY_RUN}" == "false" ]]; then
            echo "Pushing release branch to remote..."
            git push --set-upstream origin "${BRANCH_NAME}" --follow-tags
          else
            echo "Dry run enabled. Skipping push."
          fi

      - name: 'Publish Release'
        uses: ./.github/actions/publish-release
        with:
          release-version: ${{ matrix.version }}
          npm-tag: ${{ matrix.npm-tag }}
          wombat-token-core: ${{ secrets.WOMBAT_TOKEN_CORE }}
          wombat-token-cli: ${{ secrets.WOMBAT_TOKEN_CLI }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dry-run: ${{ github.event.inputs.dry_run }}
          release-branch: ${{ steps.release_branch.outputs.BRANCH_NAME }}
          previous-tag: ${{ matrix.previous-tag }}
          working-directory: ./release

  nightly-pr:
    name: Create Nightly PR
    needs: calculate-versions
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Checkout main'
        uses: 'actions/checkout@v4'
        with:
          ref: 'main'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Configure Git User'
        run: |-
          git config user.name "gemini-cli-robot"
          git config user.email "gemini-cli-robot@google.com"

      - name: 'Create and switch to a new branch'
        id: 'release_branch'
        run: |
          BRANCH_NAME="chore/nightly-version-bump-${{ needs.calculate-versions.outputs.NEXT_NIGHTLY_VERSION }}"
          git switch -c "${BRANCH_NAME}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"

      - name: 'Update package versions'
        run: |-
          npm run release:version "${{ needs.calculate-versions.outputs.NEXT_NIGHTLY_VERSION }}"

      - name: 'Commit and Push package versions'
        env:
          BRANCH_NAME: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
          DRY_RUN: '${{ github.event.inputs.dry_run }}'
        run: |-
          git add package.json package-lock.json packages/*/package.json
          git commit -m "chore(release): bump version to ${{ needs.calculate-versions.outputs.NEXT_NIGHTLY_VERSION }}"
          if [[ "${DRY_RUN}" == "false" ]]; then
            echo "Pushing release branch to remote..."
            git push --set-upstream origin "${BRANCH_NAME}"
          else
            echo "Dry run enabled. Skipping push."
          fi

      - name: 'Create and Approve Pull Request'
        if: github.event.inputs.dry_run == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
        run: |
          gh pr create \
            --title "chore(release): bump version to ${{ needs.calculate-versions.outputs.NEXT_NIGHTLY_VERSION }}" \
            --body "Automated version bump to prepare for the next nightly release." \
            --base "main" \
            --head "${BRANCH_NAME}" \
            --fill
          gh pr merge --auto --squash
