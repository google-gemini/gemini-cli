name: Promote Release

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'The branch, tag, or SHA to checkout. Defaults to main.'
        required: true
        default: 'main'
      dry_run:
        description: 'Run a dry-run of the release process; no branches, npm packages or GitHub releases will be created.'
        required: true
        type: 'boolean'
        default: true

jobs:
  promote:
    name: Promote Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Get latest preview tag
        id: preview_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | contains("preview"))] | .[0].tagName')
          echo "LATEST_PREVIEW_TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Get latest stable tag
        id: stable_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list --limit 100 --json tagName | jq -r '[.[] | select(.tagName | (contains("nightly") or contains("preview")) | not)] | .[0].tagName')
          echo "LATEST_STABLE_TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Calculate versions
        id: versions
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version from package.json: $CURRENT_VERSION"

          # Extract major and minor versions
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)

          # Calculate next nightly version (minor bump)
          # e.g., 0.6.x -> 0.7.0-nightly
          NEXT_MINOR=$((MINOR + 1))
          NEXT_NIGHTLY_VERSION="$MAJOR.$NEXT_MINOR.0-nightly"

          # Calculate next preview version
          # e.g., 0.6.x -> 0.6.0-preview
          NEXT_PREVIEW_VERSION="$MAJOR.$MINOR.0-preview"

          STABLE_RELEASE_TAG=$(echo "${{ steps.preview_tag.outputs.LATEST_PREVIEW_TAG }}" | sed 's/-preview.*//')
          STABLE_RELEASE_VERSION=$(echo "$STABLE_RELEASE_TAG" | sed 's/^v//')

          echo "next_nightly_version=$NEXT_NIGHTLY_VERSION" >> $GITHUB_OUTPUT
          echo "next_preview_version=$NEXT_PREVIEW_VERSION" >> $GITHUB_OUTPUT
          echo "stable_release_tag=$STABLE_RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "stable_release_version=$STABLE_RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "stable_npm_tag=latest" >> $GITHUB_OUTPUT
          echo "stable_previous_tag=${{ steps.stable_tag.outputs.LATEST_STABLE_TAG }}" >> $GITHUB_OUTPUT

      - name: Print calculated versions
        run: |
          echo "Dry Run: ${{ github.event.inputs.dry_run }}"
          echo "---"
          echo "Current Preview Tag: ${{ steps.preview_tag.outputs.LATEST_PREVIEW_TAG }}"
          echo "Current Stable Tag: ${{ steps.stable_tag.outputs.LATEST_STABLE_TAG }}"
          echo "---"
          echo "Promoting to Stable Release"
          echo "  Release Tag: ${{ steps.versions.outputs.stable_release_tag }}"
          echo "  Release Version: ${{ steps.versions.outputs.stable_release_version }}"
          echo "  NPM Tag: ${{ steps.versions.outputs.stable_npm_tag }}"
          echo "  Previous Tag for Release Notes: ${{ steps.versions.outputs.stable_previous_tag }}"
          echo "---"
          echo "Next Nightly Version: ${{ steps.versions.outputs.next_nightly_version }}"
          echo "Next Preview Version: ${{ steps.versions.outputs.next_preview_version }}"