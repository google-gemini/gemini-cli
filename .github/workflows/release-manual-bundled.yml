name: 'Release: Manual (Bundled)'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to release (e.g., v0.1.11). Must be a valid semver string with a "v" prefix.'
        required: true
        type: 'string'
      ref:
        description: 'The branch, tag, or SHA to release from.'
        required: true
        type: 'string'
      npm_channel:
        description: 'The npm channel to publish to'
        required: true
        type: 'choice'
        options:
          - 'dev'
          - 'preview'
          - 'nightly'
          - 'latest'
        default: 'latest'
      dry_run:
        description: 'Run a dry-run of the release process; no branches, npm packages or GitHub releases will be created.'
        required: true
        type: 'boolean'
        default: true
      force_skip_tests:
        description: 'Select to skip the "Run Tests" step in testing. Prod releases should run tests'
        required: false
        type: 'boolean'
        default: false
      skip_github_release:
        description: 'Select to skip creating a GitHub release (only used when environment is PROD)'
        required: false
        type: 'boolean'
        default: false
      environment:
        description: 'Environment'
        required: false
        type: 'choice'
        options:
          - 'prod'
          - 'dev'
        default: 'prod'

jobs:
  release:
    runs-on: 'ubuntu-latest'
    environment: "${{ github.event.inputs.environment || 'prod' }}"
    permissions:
      contents: 'write'
      packages: 'write'
      issues: 'write'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8'
        with:
          fetch-depth: 0

      - name: 'Checkout Release Code'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8'
        with:
          ref: '${{ github.event.inputs.ref }}'
          path: 'release'
          fetch-depth: 0

      - name: 'Debug Inputs'
        shell: 'bash'
        env:
          JSON_INPUTS: '${{ toJSON(inputs) }}'
        run: 'echo "$JSON_INPUTS"'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020'
        with:
          node-version-file: './release/.nvmrc'
          cache: 'npm'

      - name: 'Install Dependencies'
        working-directory: './release'
        run: 'npm ci'

      - name: 'Prepare Release Info'
        id: 'release_info'
        working-directory: './release'
        env:
          INPUT_VERSION: '${{ github.event.inputs.version }}'
        run: |
          RELEASE_VERSION="${INPUT_VERSION}"
          echo "RELEASE_VERSION=${RELEASE_VERSION#v}" >> "${GITHUB_OUTPUT}"
          echo "PREVIOUS_TAG=$(git describe --tags --abbrev=0)" >> "${GITHUB_OUTPUT}"

      - name: 'Run Tests'
        if: "${{github.event.inputs.force_skip_tests != 'true'}}"
        uses: './.github/actions/run-tests'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          working-directory: './release'

      - name: 'Publish Bundle'
        uses: './.github/actions/publish-bundle'
        with:
          version: '${{ steps.release_info.outputs.RELEASE_VERSION }}'
          tag: '${{ github.event.inputs.npm_channel }}'
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          package-scope: '${{ vars.NPM_REGISTRY_SCOPE }}'

      - name: 'ðŸ”¬ Verify Bundled NPM release by version'
        if: '${{ github.event.inputs.dry_run == false && github.event.inputs.force_skip_tests == false }}'
        working-directory: './release'
        shell: 'bash'
        env:
          CLI_PACKAGE_NAME: '${{ vars.CLI_PACKAGE_NAME }}'
          RELEASE_VERSION: '${{ steps.release_info.outputs.RELEASE_VERSION }}'
        run: |
          npx -y "${CLI_PACKAGE_NAME}"@"${RELEASE_VERSION}" --version

      - name: 'ðŸŽ‰ Create GitHub Release'
        working-directory: './release'
        if: "${{ github.event.inputs.dry_run == false && github.event.inputs.skip_github_release == false && github.event.inputs.npm_channel != 'dev' && vars.NPM_REGISTRY_URL != 'https://npm.pkg.github.com/' }}"
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          RELEASE_TAG: '${{ github.event.inputs.version }}'
          PREVIOUS_TAG: '${{ steps.release_info.outputs.PREVIOUS_TAG }}'
        run: |
          gh release create "${RELEASE_TAG}" \
            bundle/gemini.js \
            --title "Release ${RELEASE_TAG}" \
            --notes-start-tag "${PREVIOUS_TAG}" \
            --generate-notes

      - name: 'Create Issue on Failure'
        if: '${{ failure() && github.event.inputs.dry_run == false }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          RELEASE_TAG: '${{ github.event.inputs.version }}'
          DETAILS_URL: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        run: |
          gh issue create \
            --title 'Manual Release Failed for ${RELEASE_TAG} on $(date +'%Y-%m-%d')' \
            --body 'The manual release workflow failed. See the full run for details: ${DETAILS_URL}' \
            --label 'kind/bug,release-failure,priority/p0'
