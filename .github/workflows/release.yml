name: Release

on:
  push:
    tags:
      - 'v*-custom'  # Triggers on tags like v0.1.12-custom
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to release (e.g., v0.1.12-custom)'
        required: true
        type: string
      dry_run:
        description: 'Run a dry-run of the release process'
        required: true
        type: boolean
        default: true

jobs:
  release:
    runs-on: ubuntu-latest

    if: github.repository == 'Icarus603/gemini-code'
    permissions:
      contents: write
      packages: write
      id-token: write
      issues: write # For creating issues on failure
    outputs:
      RELEASE_TAG: ${{ steps.version.outputs.RELEASE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Set dry run variable
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Tag push - real release
            echo "is_dry_run=false" >> $GITHUB_OUTPUT
          else
            # Manual dispatch - use input
            echo "is_dry_run=${{ inputs.dry_run }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Set version variables
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Tag push event - extract from tag
            RELEASE_TAG="${{ github.ref_name }}"
            RELEASE_VERSION=$(echo "$RELEASE_TAG" | sed 's/^v//')
          else
            # Manual workflow dispatch
            RELEASE_TAG="${{ inputs.version }}"
            RELEASE_VERSION=$(echo "$RELEASE_TAG" | sed 's/^v//')
          fi
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "NPM_TAG=latest" >> $GITHUB_OUTPUT

      - name: Run basic validation
        run: |
          npm run build
          npm run bundle
          npm run test

      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update package versions
        run: |
          npm run release:version ${{ steps.version.outputs.RELEASE_VERSION }}

      - name: Commit version changes
        if: ${{ steps.vars.outputs.is_dry_run == 'false' && github.event_name == 'workflow_dispatch' }}
        run: |
          git add package.json package-lock.json packages/*/package.json
          git commit -m "chore(release): ${{ steps.version.outputs.RELEASE_TAG }}"
          git push origin main

      - name: Build and Prepare Packages
        run: |
          npm run build:packages
          npm run prepare:package

      - name: Create bundle
        run: npm run bundle

      - name: Configure npm for publishing
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: '@icarus603'

      - name: Publish @icarus603/gemini-code-core
        run: npm publish --workspace=@icarus603/gemini-code-core --tag=${{ steps.version.outputs.NPM_TAG }} ${{ steps.vars.outputs.is_dry_run == 'true' && '--dry-run' || '' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install latest core package
        if: ${{ steps.vars.outputs.is_dry_run == 'false' }}
        run: npm install @icarus603/gemini-code-core@${{ steps.version.outputs.RELEASE_VERSION }} --workspace=@icarus603/gemini-code --save-exact

      - name: Publish @icarus603/gemini-code
        run: npm publish --workspace=@icarus603/gemini-code --tag=${{ steps.version.outputs.NPM_TAG }} ${{ steps.vars.outputs.is_dry_run == 'true' && '--dry-run' || '' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release and Tag
        if: ${{ steps.vars.outputs.is_dry_run == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.RELEASE_TAG }} \
            bundle/gemini.js \
            --target "main" \
            --title "Release ${{ steps.version.outputs.RELEASE_TAG }}" \
            --generate-notes

      - name: Create Issue on Failure
        if: failure()
        run: |
          gh issue create \
            --title "Release Failed for ${{ steps.version.outputs.RELEASE_TAG || 'N/A' }} on $(date +'%Y-%m-%d')" \
            --body "The release workflow failed. See the full run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --label "kind/bug,release-failure"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
