# Idea: Herramienta de Modificación de Código "Borrar y Insertar" (Delete and Insert)

## Problema Actual:
La herramienta `replace` (internamente `edit`) es extremadamente frágil. Requiere una coincidencia exacta del `old_string`, incluyendo espacios en blanco, saltos de línea y comentarios. Cualquier pequeña variación en el contenido real del archivo hace que la operación falle, lo que interrumpe el flujo de trabajo y frustra al usuario. Esta fragilidad no representa cómo se trabaja de forma robusta con código.

## Propuesta:
Crear una nueva herramienta de modificación de código que opere mediante la especificación de un rango de texto a borrar y la inserción de nuevo contenido en esa posición. Alternativamente, mejorar la herramienta `replace` existente para que soporte esta funcionalidad.

## Justificación:
*   **Robustez:** Una operación de "borrar y luego insertar" es inherentemente más robusta que un `replace` basado en coincidencia exacta de texto. Permite modificar código sin preocuparse por variaciones menores en el `old_string`.
*   **Precisión:** Permite al agente especificar con precisión dónde se debe realizar el cambio, incluso si el contenido circundante varía.
*   **Flexibilidad:** Facilita la inserción de nuevo código, la eliminación de bloques de código o la sustitución de secciones completas de forma más fiable.
*   **Mejora de la Experiencia del Agente:** Reduce los fallos de las herramientas, lo que lleva a un flujo de trabajo más fluido y a una mayor autonomía del agente.

## Sugerencias de Implementación:

### Opción 1: Nueva Herramienta (`delete_and_insert`)
*   **Parámetros:**
    *   `file_path`: Ruta absoluta del archivo.
    *   `start_line`: Número de línea de inicio del rango a borrar (0-indexed).
    *   `start_column`: Número de columna de inicio del rango a borrar (0-indexed).
    *   `end_line`: Número de línea de fin del rango a borrar.
    *   `end_column`: Número de columna de fin del rango a borrar.
    *   `new_content`: El nuevo contenido a insertar en la posición `start_line:start_column`. Si el rango a borrar es `start_line:start_column` a `end_line:end_column`, este contenido reemplazará lo borrado. Si el rango a borrar es de tamaño cero (ej. `start_line:start_column` a `start_line:start_column`), se insertará el contenido.
*   **Funcionamiento:** Leer el archivo, borrar el texto dentro del rango especificado, e insertar `new_content` en la posición de inicio.

### Opción 2: Mejora de la Herramienta `replace`
*   **Parámetros Adicionales:** Añadir `start_line`, `start_column`, `end_line`, `end_column` como parámetros opcionales a la herramienta `replace`.
*   **Lógica:** Si se proporcionan estos parámetros de rango, la herramienta operaría como "borrar y insertar" en ese rango. Si no se proporcionan, se mantendría el comportamiento actual de `old_string`/`new_string`.

## Consideraciones para el Ingeniero:
*   **Manejo de Líneas/Columnas:** Asegurar un manejo robusto de los índices de línea y columna, especialmente con diferentes convenciones de salto de línea.
*   **Validación de Rango:** Validar que el rango especificado es válido y no excede los límites del archivo.
*   **Integración con AST (Futuro):** Esta herramienta podría ser un paso intermedio hacia una manipulación de código más profunda basada en AST, donde los rangos se derivan de nodos del árbol sintáctico.

## Archivos Relevantes:
*   `packages/core/src/tools/edit.ts`: Si se decide mejorar la herramienta `replace`.
*   `packages/core/src/tools/`: Para una nueva herramienta.
*   `packages/core/src/services/fileSystemService.ts`: Para las operaciones de lectura/escritura de archivos.
