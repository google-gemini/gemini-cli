# Idea: Detección y Resolución de Bucles Robusta para el Agente

## Problema Actual:
El agente puede quedarse atascado en bucles de comportamiento o cognitivos, lo que reduce su agilidad y autonomía, y frustra al usuario. Aunque existe un `LoopDetectionService`, su robustez y estrategias de ruptura pueden mejorarse.

## Propuesta:
Mejorar el `LoopDetectionService` para una detección más sofisticada y estrategias de ruptura de bucle más proactivas y diversas, con el objetivo de que el agente sea más ágil y autónomo.

## Justificación:
Un agente que se atasca requiere supervisión constante, lo que contradice el objetivo de autonomía. Una detección y resolución de bucles robusta es fundamental para la fiabilidad y la experiencia del usuario.

## Sugerencias de Mejora Específicas:

### 1. Detección de Bucles Más Sofisticada:
*   **Detección Semántica de Contenido:** Utilizar embeddings (si están disponibles) o técnicas más avanzadas que el hashing de chunks para detectar bucles de contenido incluso si el texto varía ligeramente (ej. sinónimos, refraseos).
*   **Detección de Bucles de Herramientas No Consecutivos/Alternantes:** Ampliar el seguimiento de llamadas a herramientas para identificar patrones repetitivos que no son estrictamente consecutivos (ej. `tool_A, tool_B, tool_A, tool_B` o `tool_A, tool_C, tool_A`).
*   **Detección de Bucles Basados en el Estado del Sistema de Archivos:** Si una herramienta modifica un archivo, y el contenido del archivo no cambia (o cambia de forma trivial) después de varias operaciones, esto indica un bucle. El servicio de detección de bucles debería tener acceso a esta información.

### 2. Estrategias de Ruptura de Bucle Más Agresivas y Diversas:
*   **Escalada Automática Proactiva:** Si se detecta un bucle con alta confianza, el CLI debería:
    *   Proponer automáticamente un `/restore` al último checkpoint conocido.
    *   Proponer un `/clear` para resetear el contexto visual.
    *   Proponer un `/compress` para resumir el historial (si la herramienta existe).
    *   Preguntar al usuario directamente con opciones claras: "Parece que estoy en un bucle. ¿Quieres que intente X, Y o Z?"
*   **Inyección de "Novedad" en el Prompt:** Si el LLM detecta un bucle, el CLI podría inyectar un prompt al modelo principal que lo fuerce a explorar nuevas vías de pensamiento (ej. "Parece que estás atascado. Intenta una estrategia completamente nueva o pide más información").
*   **Ajuste Dinámico de Parámetros del LLM:** Considerar ajustar temporalmente parámetros del LLM (ej. aumentar la "temperatura" o "top_p") para fomentar la exploración y la creatividad cuando se detecta un bucle.

### 3. Integración con el Usuario y Feedback Visual:
*   **Feedback Visual de Confianza:** Mostrar una indicación visual al usuario cuando el `LoopDetectionService` tiene una confianza creciente en que hay un bucle, incluso antes de que se declare como tal.
*   **Comando de Usuario para Reportar Bucle (`/loop`):** Un comando que el usuario pueda usar para reportar que cree que el agente está en un bucle. Esto activaría una comprobación inmediata y agresiva, y podría incluir opciones para que el usuario guíe la salida del bucle.

## Archivos Relevantes:
*   `packages/core/src/services/loopDetectionService.ts`: El servicio principal a modificar.
*   `packages/core/src/config/config.ts`: Para añadir opciones de configuración para las nuevas estrategias.
*   `packages/core/src/telemetry/types.ts` / `loggers.ts`: Para ampliar los tipos de bucles detectados y el logging.
*   `packages/cli/src/ui/`: Para posibles indicadores visuales o comandos de usuario.
