{
  "version": 3,
  "sources": ["../src/content.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nclass GeminiCliContentScript {\n  private lastSelectedText = '';\n  private debounceTimer: number | undefined;\n\n  constructor() {\n    this.setupEventListeners();\n    this.notifyPageLoad();\n  }\n\n  private setupEventListeners() {\n    // Listen for text selection changes\n    document.addEventListener('selectionchange', () => {\n      this.handleSelectionChange();\n    });\n\n    // Listen for page focus/blur\n    window.addEventListener('focus', () => {\n      this.notifyPageFocus();\n    });\n\n    // Listen for messages from background script\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      if (message.type === 'get-page-context') {\n        sendResponse(this.getPageContext());\n      } else if (message.type === 'get-selected-text') {\n        sendResponse(this.getSelectedText());\n      }\n    });\n  }\n\n  private handleSelectionChange() {\n    // Debounce selection changes to avoid too many updates\n    if (this.debounceTimer) {\n      clearTimeout(this.debounceTimer);\n    }\n\n    this.debounceTimer = window.setTimeout(() => {\n      const selectedText = this.getSelectedText();\n      if (selectedText !== this.lastSelectedText) {\n        this.lastSelectedText = selectedText;\n        this.notifySelectionChange(selectedText);\n      }\n    }, 300);\n  }\n\n  private getSelectedText(): string {\n    const selection = window.getSelection();\n    return selection?.toString().trim() || '';\n  }\n\n  private getPageContext() {\n    const selectedText = this.getSelectedText();\n    const visibleText = this.getVisibleText();\n    const pageStructure = this.getPageStructure();\n\n    return {\n      url: window.location.href,\n      title: document.title,\n      selectedText: selectedText.length > 0 ? selectedText : undefined,\n      visibleText,\n      pageStructure,\n    };\n  }\n\n  private getVisibleText(): string {\n    // Get visible text from the page, excluding scripts and styles\n    const clonedDocument = document.cloneNode(true) as Document;\n    \n    // Remove script and style elements\n    const scriptsAndStyles = clonedDocument.querySelectorAll('script, style, noscript');\n    scriptsAndStyles.forEach((element) => element.remove());\n\n    // Get text content\n    const text = clonedDocument.body?.innerText || '';\n    \n    // Limit to first 4KB to avoid sending too much data\n    return text.substring(0, 4096);\n  }\n\n  private getPageStructure() {\n    const structure: unknown[] = [];\n    \n    // Get main structural elements\n    const importantSelectors = [\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n      'nav', 'main', 'article', 'section', 'aside',\n      '[role=\"main\"]', '[role=\"navigation\"]', '[role=\"banner\"]'\n    ];\n\n    for (const selector of importantSelectors) {\n      const elements = document.querySelectorAll(selector);\n      for (let i = 0; i < Math.min(elements.length, 3); i++) {\n        const element = elements[i];\n        if (element) {\n          const text = element.textContent?.trim();\n          \n          if (text && text.length > 0 && text.length <= 200) {\n            structure.push({\n              tag: element.tagName.toLowerCase(),\n              text: text,\n              attributes: this.getRelevantAttributes(element),\n            });\n          }\n        }\n      }\n    }\n\n    return structure.slice(0, 15); // Limit to 15 elements\n  }\n\n  private getRelevantAttributes(element: Element): Record<string, string> {\n    const attrs: Record<string, string> = {};\n    const relevantAttrs = ['id', 'class', 'href', 'src', 'alt', 'title', 'role'];\n    \n    for (const attr of relevantAttrs) {\n      const value = element.getAttribute(attr);\n      if (value) {\n        attrs[attr] = value;\n      }\n    }\n    \n    return attrs;\n  }\n\n  private notifyPageLoad() {\n    chrome.runtime.sendMessage({\n      type: 'page-loaded',\n      data: this.getPageContext(),\n    }).catch(() => {\n      // Extension might not be ready yet, ignore\n    });\n  }\n\n  private notifyPageFocus() {\n    chrome.runtime.sendMessage({\n      type: 'page-focused',\n      data: {\n        url: window.location.href,\n        title: document.title,\n      },\n    }).catch(() => {\n      // Extension might not be ready yet, ignore\n    });\n  }\n\n  private notifySelectionChange(selectedText: string) {\n    if (selectedText.length > 0) {\n      chrome.runtime.sendMessage({\n        type: 'text-selected',\n        data: {\n          selectedText: selectedText.substring(0, 16384), // Limit to 16KB\n          url: window.location.href,\n          title: document.title,\n        },\n      }).catch(() => {\n        // Extension might not be ready yet, ignore\n      });\n    }\n  }\n}\n\n// Initialize the content script\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    new GeminiCliContentScript();\n  });\n} else {\n  new GeminiCliContentScript();\n}"],
  "mappings": "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",
  "names": []
}
