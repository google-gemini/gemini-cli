{
  "version": 3,
  "sources": ["../src/popup.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nclass PopupManager {\n  private statusEl: HTMLElement;\n  private statusTextEl: HTMLElement;\n  private pageTitleEl: HTMLElement;\n  private pageUrlEl: HTMLElement;\n  private selectedTextEl: HTMLElement;\n  private selectedTextSectionEl: HTMLElement;\n  private tabCountEl: HTMLElement;\n  private openGeminiBtn: HTMLButtonElement;\n\n  constructor() {\n    this.statusEl = document.getElementById('status')!;\n    this.statusTextEl = document.getElementById('status-text')!;\n    this.pageTitleEl = document.getElementById('page-title')!;\n    this.pageUrlEl = document.getElementById('page-url')!;\n    this.selectedTextEl = document.getElementById('selected-text')!;\n    this.selectedTextSectionEl = document.getElementById('selected-text-section')!;\n    this.tabCountEl = document.getElementById('tab-count')!;\n    this.openGeminiBtn = document.getElementById('open-gemini') as HTMLButtonElement;\n\n    this.setupEventListeners();\n    this.loadCurrentState();\n  }\n\n  private setupEventListeners() {\n    this.openGeminiBtn.addEventListener('click', () => {\n      this.openGeminiCli();\n    });\n\n    document.getElementById('help-link')?.addEventListener('click', (e) => {\n      e.preventDefault();\n      chrome.tabs.create({\n        url: 'https://github.com/google-gemini/gemini-cli#readme',\n      });\n    });\n\n    document.getElementById('settings-link')?.addEventListener('click', (e) => {\n      e.preventDefault();\n      chrome.runtime.openOptionsPage();\n    });\n  }\n\n  private async loadCurrentState() {\n    try {\n      // Get current tab info\n      const [currentTab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      if (currentTab) {\n        this.updateCurrentPage(currentTab.title || 'Untitled', currentTab.url || '');\n        \n        // Get selected text from current tab\n        if (currentTab.id) {\n          try {\n            const [result] = await chrome.scripting.executeScript({\n              target: { tabId: currentTab.id },\n              func: () => window.getSelection()?.toString().trim() || '',\n            });\n\n            if (result?.result) {\n              this.updateSelectedText(result.result);\n            }\n          } catch (error) {\n            // Ignore errors for restricted pages\n          }\n        }\n      }\n\n      // Get total tab count\n      const allTabs = await chrome.tabs.query({ currentWindow: true });\n      const webTabs = allTabs.filter(tab => tab.url && !tab.url.startsWith('chrome://'));\n      this.updateTabCount(webTabs.length);\n\n      // Check connection status\n      this.checkConnectionStatus();\n\n    } catch (_error) {\n      console.error('Error loading popup state:', _error);\n      this.updateStatus('disconnected', 'Error loading extension state');\n    }\n  }\n\n  private updateCurrentPage(title: string, url: string) {\n    this.pageTitleEl.textContent = title;\n    this.pageUrlEl.textContent = url;\n    this.pageUrlEl.title = url;\n  }\n\n  private updateSelectedText(text: string) {\n    if (text && text.length > 0) {\n      this.selectedTextEl.textContent = text.length > 200 \n        ? text.substring(0, 200) + '...' \n        : text;\n      this.selectedTextSectionEl.style.display = 'block';\n    } else {\n      this.selectedTextSectionEl.style.display = 'none';\n    }\n  }\n\n  private updateTabCount(count: number) {\n    this.tabCountEl.textContent = `${count} tab${count === 1 ? '' : 's'}`;\n  }\n\n  private checkConnectionStatus() {\n    // Check if we can communicate with background script\n    chrome.runtime.sendMessage({ type: 'ping' }, (_response) => {\n      if (chrome.runtime.lastError) {\n        this.updateStatus('disconnected', 'Extension error');\n        return;\n      }\n\n      // For now, we'll assume connected if the background script responds\n      // In a real implementation, this would check for actual Gemini CLI connection\n      this.updateStatus('connected', 'Ready to assist with Gemini CLI');\n      this.openGeminiBtn.disabled = false;\n    });\n  }\n\n  private updateStatus(status: 'connected' | 'disconnected' | 'connecting', message: string) {\n    this.statusEl.className = `status ${status}`;\n    this.statusTextEl.textContent = message;\n  }\n\n  private async openGeminiCli() {\n    try {\n      // This would ideally communicate with a running Gemini CLI instance\n      // For now, we'll just show instructions to the user\n      \n      const newTabUrl = chrome.runtime.getURL('welcome.html');\n      await chrome.tabs.create({ url: newTabUrl });\n      \n      // Close the popup\n      window.close();\n    } catch (error) {\n      console.error('Error opening Gemini CLI:', error);\n      this.updateStatus('disconnected', 'Failed to open Gemini CLI');\n    }\n  }\n}\n\n// Initialize popup when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  new PopupManager();\n});"],
  "mappings": "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",
  "names": []
}
