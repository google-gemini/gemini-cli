/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

import { readFileSync, writeFileSync } from 'node:fs';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

import { VARIABLE_SCHEMA } from '../../packages/cli/src/config/extensions/variableSchema.ts';

type VariableDefinition =
  (typeof VARIABLE_SCHEMA)[keyof typeof VARIABLE_SCHEMA];
type SchemaEntry = readonly [string, VariableDefinition];

const START_MARKER = '<!-- AUTO-GENERATED: extension variables START -->';
const END_MARKER = '<!-- AUTO-GENERATED: extension variables END -->';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const DOC_PATH = resolve(__dirname, '../../docs/extensions/index.md');

function escapeRegExp(value: string): string {
  return value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function formatVariableName(name: string): string {
  return name === '/' ? '${/}' : '${' + name + '}';
}

function renderTable(entries: SchemaEntry[]): string {
  const header = ['| variable | description |', '| --- | --- |'];
  const rows = entries.map(([key, value]) => {
    const description = value.description
      .trim()
      .replace(/\|/g, '\\|')
      .replace(/\r?\n/g, '<br />');
    return `| \`${formatVariableName(key)}\` | ${description} |`;
  });

  return [
    START_MARKER,
    '<!-- This section is generated by scripts/docgen/generate-extension-vars.ts. Do not edit manually. -->',
    '',
    ...header,
    ...rows,
    '',
    END_MARKER,
  ].join('\n');
}

function upsertBlock(original: string, block: string): string {
  const hasStart = original.includes(START_MARKER);
  const hasEnd = original.includes(END_MARKER);

  if (hasStart && hasEnd) {
    const pattern = new RegExp(
      `${escapeRegExp(START_MARKER)}[\\s\\S]*?${escapeRegExp(END_MARKER)}`,
    );
    return original.replace(pattern, block);
  }

  if (hasStart || hasEnd) {
    throw new Error(
      `Unbalanced auto-generation markers found in ${DOC_PATH}. Please fix it manually.`,
    );
  }

  return `${original.trim()}\n\n${block}\n`;
}

function main() {
  const entries = Object.entries(VARIABLE_SCHEMA) as SchemaEntry[];
  const doc = readFileSync(DOC_PATH, 'utf8');
  const block = renderTable(entries);
  const updated = upsertBlock(doc, block);

  if (updated !== doc) {
    writeFileSync(DOC_PATH, updated, 'utf8');
  }

  console.log(
    'Updated docs/extensions/index.md with extension variables table.',
  );
}

main();
